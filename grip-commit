#!/usr/bin/env python3

# COMP2041/9044 Assignment2
# grip-commit
#
# This program was written by Melina Salardini (z5393518)
# on july 14, 2024
#
# it should save all files in the index dir to the reposiory
# with its commitmassage

import os
import sys
import shutil
import filecmp

grip_dir = '.grip'
index_dir = os.path.join(grip_dir, 'index')
commit_dir = os.path.join(grip_dir, 'commits')

# check if the .grip dir exists
if not os.path.exists(grip_dir):
    print(f"grip-commit: error: grip repository directory .grip not found",
          file=sys.stderr)
    sys.exit(1)

# check for the correct number of arguments
if len(sys.argv) < 3 or (len(sys.argv) == 4 and sys.argv[2] != "-m") or (len(sys.argv) == 3 and sys.argv[1] != "-m"):
    print(f"usage: grip-commit [-a] -m commit-message", file=sys.stderr)
    sys.exit(1)

# extract the message based on wether the -a opption exists or not
a_opption = False
if len(sys.argv) == 4 and sys.argv[1] == "-a" and sys.argv[2] == "-m":
    a_opption = True
    message = sys.argv[3]
elif len(sys.argv) == 3 and sys.argv[1] == "-m":
    message = sys.argv[2]


# check if the  index dir exists or its empty
if not os.path.exists(index_dir) or not os.listdir(index_dir):
    print(f"nothing to commit", file=sys.stderr)
    sys.exit(1)


# If -a is specified, update files in the index from the current directory
if a_opption:
    for filename in os.listdir('.'):
        if os.path.isfile(filename):
            shutil.copy(filename, os.path.join(index_dir, filename))


# function to get the latest commit directory
def get_latest_commit_dir():
    if not os.path.exists(commit_dir):
        return None

    commit_numbers = sorted([int(d.split('_')[1])
                             for d in os.listdir(commit_dir)
                             if d.startswith('commit_')])
    if not commit_numbers:
        return None

    latest_commit_number = commit_numbers[-1]
    return os.path.join(commit_dir, f'commit_{latest_commit_number}')

latest_commit_dir = get_latest_commit_dir()

# Check for modified files in the index compared to the latest commit
files_to_commit = []
delete_flag = False
if latest_commit_dir:
    # if its in index but not commit
    for file in os.listdir(index_dir):
        file_in_commit = os.path.join(latest_commit_dir, file)
        if not os.path.exists(file_in_commit):
            files_to_commit.append(file)
    
    for filename in os.listdir(latest_commit_dir):
        # skip the .txt files
        if filename.endswith('.txt'):
            continue

        index_file = os.path.join(index_dir, filename)
        marked_index_file = os.path.join(index_dir, f"{filename}?")
        commit_file = os.path.join(latest_commit_dir, filename)

        if os.path.exists(index_file) or os.path.exists(marked_index_file):
            # File exists in both index and commit directories
            if os.path.exists(marked_index_file):
                # Handle files with "?"
                os.remove(marked_index_file)
                delete_flag = True
            elif not filecmp.cmp(index_file, commit_file, shallow=False):
                # Files are different
                files_to_commit.append(filename)
        else:
            # File exists in commit directory but not in index directory
            os.remove(filename)
            delete_flag = True
else:
    # If commit_dir does not exist, just list files in index_dir
    if os.path.exists(index_dir):
        files_to_commit = os.listdir(index_dir)

if not files_to_commit and delete_flag == False:
    print("nothing to commit", file=sys.stderr)
    sys.exit(1)


# make the commit dir
if not os.path.exists(commit_dir):
    os.mkdir(commit_dir)

# find the commit number
commit_number = 0
while os.path.exists(os.path.join(commit_dir, f"commit_{commit_number}")):
    commit_number += 1

commit_dir = os.path.join(commit_dir, f"commit_{commit_number}")
os.mkdir(commit_dir)

try:
    # copy file from index dir
    for filename in os.listdir(index_dir):
        shutil.copy(os.path.join(index_dir, filename),
                    os.path.join(commit_dir, filename))

    # write commit massage to commit massage file
    with open(os.path.join(commit_dir, "commit_massage.txt"), 'w') as f:
        f.write(message)

    print(f"Committed as commit {commit_number}")


except Exception as e:
        print(f"grip-commit: error: {e}", file=sys.stderr)
        sys.exit(1)
    